import React, { useEffect, useState } from 'react';
import {
  Box, Typography, Card, CardContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,
  Button, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Checkbox, FormControlLabel,
  CircularProgress, Tooltip, Chip, Alert, MenuItem, FormControl, InputLabel, Select, Accordion, AccordionSummary, AccordionDetails
} from '@mui/material';
import Grid from '@mui/material/Grid';
import { Add, Edit, Delete, Group, Schedule, ExpandMore, AutoAwesome } from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { classesAPI } from '../services/api';
import Pagination from '@mui/material/Pagination';

interface ClassItem {
  id: number;
  name: string;
  section: string;
  school: number;
  school_name: string;
  academic_year: string;
  capacity: number;
  students_count: number;
  subjects_count: number;
  is_active: boolean;
}

interface StudentItem {
  id: number;
  user: { first_name: string; last_name: string; email: string };
  student_id: string;
  academic_status: string;
}

interface ScheduleItem {
  id: number;
  subject: { name: string };
  teacher_info: { name: string } | null;
  day: string;
  start_time: string;
  end_time: string;
  room: string;
}

const initialForm = {
  name: '',
  section: '',
  academic_year: '',
  capacity: 40,
  is_active: true,
};

const Classes: React.FC = () => {
  const { user } = useAuth();
  const canManage = user?.role === 'school_admin' || user?.role === 'principal' || user?.role === 'secretary';
  const [classes, setClasses] = useState<ClassItem[]>([]);
  const [academicYears, setAcademicYears] = useState<string[]>([]);
  const [selectedYear, setSelectedYear] = useState<string>('');
  const [latestYear, setLatestYear] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [dialogOpen, setDialogOpen] = useState(false);
  const [editingId, setEditingId] = useState<number | null>(null);
  const [form, setForm] = useState(initialForm);
  const [autoGenerateDialog, setAutoGenerateDialog] = useState(false);
  const [autoGenerateLoading, setAutoGenerateLoading] = useState(false);
  const [autoGenerateError, setAutoGenerateError] = useState('');
  const [autoGenerateSuccess, setAutoGenerateSuccess] = useState('');
  const [yearClassCounts, setYearClassCounts] = useState<{[key: string]: number}>({});
  const [yearCountsLoading, setYearCountsLoading] = useState(false);
  const [targetYear, setTargetYear] = useState('');
  const [page, setPage] = useState(1);
  const [pageSize] = useState(12);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);
  const [studentsModal, setStudentsModal] = useState<{ open: boolean; classId: number | null; students: StudentItem[] }>({ open: false, classId: null, students: [] });
  const [scheduleModal, setScheduleModal] = useState<{ open: boolean; classId: number | null; schedule: ScheduleItem[] }>({ open: false, classId: null, schedule: [] });
  const [modalLoading, setModalLoading] = useState(false);
  const [modalError, setModalError] = useState('');
  
  const fetchClasses = async (year?: string, pageNum: number = 1) => {
    setLoading(true);
    setError('');
    try {
      const params: any = { page: pageNum, page_size: pageSize };
      if (year && year !== '') {
        params.academic_year = year;
      }
      console.log('Fetching classes with params:', params);
      const res = await classesAPI.getClasses(params);
      // Handle paginated response
      const classesData = res.data.results || res.data;
      let classesArray = Array.isArray(classesData) ? classesData : [];
      
      console.log('Received classes:', classesArray.length, 'for year:', year);
      
      // If no specific year is selected (All Years), sort by academic year descending
      if (!year || year === '') {
        classesArray = classesArray.sort((a, b) => b.academic_year.localeCompare(a.academic_year));
        console.log('Sorted classes by academic year (descending)');
      }
      
      setClasses(classesArray);
      
      // Update pagination info
      if (res.data.count !== undefined) {
        setTotalCount(res.data.count);
        setTotalPages(Math.ceil(res.data.count / pageSize));
      }
      setPage(pageNum);
    } catch (err) {
      console.error('Error fetching classes:', err);
      setError('Failed to fetch classes.');
    } finally {
      setLoading(false);
    }
  };

  const fetchClassCounts = async () => {
    setYearCountsLoading(true);
    try {
      const counts: {[key: string]: number} = {};
      for (const year of academicYears) {
        const res = await classesAPI.getClasses({ academic_year: year });
        const classesData = res.data.results || res.data;
        counts[year] = Array.isArray(classesData) ? classesData.length : 0;
      }
      setYearClassCounts(counts);
    } catch (err) {
      console.error('Error fetching class counts:', err);
    } finally {
      setYearCountsLoading(false);
    }
  };

  const fetchAcademicYears = async () => {
    try {
      const res = await classesAPI.getAcademicYears();
      setAcademicYears(res.data.academic_years || []);
      setLatestYear(res.data.latest_year || '');
      
      // Fetch class counts for all years
      if (res.data.academic_years && res.data.academic_years.length > 0) {
        await fetchClassCounts();
      }
      
      if (res.data.latest_year && !selectedYear) {
        setSelectedYear(res.data.latest_year);
        fetchClasses(res.data.latest_year, 1);
      } else if (!selectedYear) {
        fetchClasses(undefined, 1);
      }
    } catch (err) {
      console.error('Failed to fetch academic years:', err);
    }
  };

  const handleAutoGenerate = async () => {
    if (!targetYear) {
      setAutoGenerateError('Please enter a target academic year');
      return;
    }

    setAutoGenerateLoading(true);
    setAutoGenerateError('');
    setAutoGenerateSuccess('');

    try {
      const res = await classesAPI.autoGenerateClasses(targetYear);
      setAutoGenerateSuccess(res.data.message);
      setTargetYear('');
      setAutoGenerateDialog(false);
      
      // Refresh academic years and classes
      await fetchAcademicYears();
      setSelectedYear(targetYear);
      await fetchClasses(targetYear, 1);
    } catch (err: any) {
      setAutoGenerateError(err.response?.data?.error || 'Failed to auto-generate classes');
    } finally {
      setAutoGenerateLoading(false);
    }
  };

  const handleYearChange = (year: string) => {
    console.log('Year changed to:', year);
    setSelectedYear(year);
    setPage(1); // Reset to first page when changing year
    // Pass empty string for "All Years" to fetch all classes
    const yearToFetch = year === '' ? undefined : year;
    console.log('Fetching classes for year:', yearToFetch);
    fetchClasses(yearToFetch, 1);
  };

  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {
    setPage(value);
    const yearToFetch = selectedYear === '' ? undefined : selectedYear;
    fetchClasses(yearToFetch, value);
  };

  useEffect(() => {
    fetchAcademicYears();
  }, []);

  const handleOpenDialog = (cls?: ClassItem) => {
    if (cls) {
      setForm({
        name: cls.name,
        section: cls.section,
        academic_year: cls.academic_year,
        capacity: cls.capacity,
        is_active: cls.is_active,
      });
      setEditingId(cls.id);
    } else {
      setForm(initialForm);
      setEditingId(null);
    }
    setDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setEditingId(null);
  };

  const handleFormChange = (field: string, value: any) => {
    setForm(prev => ({ ...prev, [field]: value }));
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (editingId) {
        await classesAPI.updateClass(editingId, form);
      } else {
        await classesAPI.createClass(form);
      }
      // Refresh classes with current filter and page
      const yearToFetch = selectedYear === '' ? undefined : selectedYear;
      fetchClasses(yearToFetch, page);
      // Refresh academic years to update counts
      await fetchAcademicYears();
      setDialogOpen(false);
    } catch (err) {
      setError('Failed to save class.');
    }
  };

  const handleDelete = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this class?')) return;
    try {
      await classesAPI.deleteClass(id);
      // Refresh classes with current filter and page
      const yearToFetch = selectedYear === '' ? undefined : selectedYear;
      fetchClasses(yearToFetch, page);
      // Refresh academic years to update counts
      await fetchAcademicYears();
    } catch (err) {
      setError('Failed to delete class.');
    }
  };

  const handleViewStudents = async (classId: number) => {
    setStudentsModal({ open: true, classId, students: [] });
    setModalLoading(true);
    setModalError('');
    try {
      const res = await classesAPI.getClassStudents(classId);
      setStudentsModal({ open: true, classId, students: Array.isArray(res.data) ? res.data : [] });
    } catch (err) {
      setModalError('Failed to load students.');
    } finally {
      setModalLoading(false);
    }
  };

  const handleViewSchedule = async (classId: number) => {
    setScheduleModal({ open: true, classId, schedule: [] });
    setModalLoading(true);
    setModalError('');
    try {
      const res = await classesAPI.getClassSchedule(classId);
      setScheduleModal({ open: true, classId, schedule: Array.isArray(res.data) ? res.data : [] });
    } catch (err) {
      setModalError('Failed to load schedule.');
    } finally {
      setModalLoading(false);
    }
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Classes Management
      </Typography>
      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      
      {/* Auto Generate and Year Filter Section */}
      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">
              Academic Year: {selectedYear || 'All Years'} 
              {totalCount > 0 && ` (${totalCount} classes)`}
            </Typography>
            <Box sx={{ display: 'flex', gap: 2 }}>
              {canManage && (
                <Button 
                  variant="outlined" 
                  startIcon={<AutoAwesome />} 
                  onClick={() => setAutoGenerateDialog(true)}
                  color="primary"
                >
                  Auto Generate Classes
                </Button>
              )}
              <Button variant="contained" startIcon={<Add />} onClick={() => handleOpenDialog()}>
                Add Class
              </Button>
            </Box>
          </Box>
          
          {/* Year Filter */}
          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
            <FormControl sx={{ minWidth: 200 }}>
              <InputLabel>Filter by Year</InputLabel>
              <Select
                value={selectedYear}
                onChange={(e) => handleYearChange(e.target.value)}
                label="Filter by Year"
              >
                <MenuItem value="">All Years</MenuItem>
                {academicYears.map((year) => (
                  <MenuItem key={year} value={year}>
                    {year}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>
        </CardContent>
      </Card>
      <Card>
        <CardContent>
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
              <CircularProgress />
            </Box>
          ) : (
            <>
              <TableContainer component={Paper}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Name</TableCell>
                      <TableCell>Section</TableCell>
                      <TableCell>Academic Year</TableCell>
                      <TableCell>Capacity</TableCell>
                      <TableCell>Students</TableCell>
                      <TableCell>Subjects</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {classes.map(cls => (
                      <TableRow key={cls.id}>
                        <TableCell>{cls.name}</TableCell>
                        <TableCell>{cls.section}</TableCell>
                        <TableCell>{cls.academic_year}</TableCell>
                        <TableCell>{cls.capacity}</TableCell>
                        <TableCell>
                          <Button size="small" startIcon={<Group />} onClick={() => handleViewStudents(cls.id)}>
                            {cls.students_count}
                          </Button>
                        </TableCell>
                        <TableCell>{cls.subjects_count}</TableCell>
                        <TableCell>
                          <Chip label={cls.is_active ? 'Active' : 'Inactive'} color={cls.is_active ? 'success' : 'default'} size="small" />
                        </TableCell>
                        <TableCell>
                          <Tooltip title="View Schedule">
                            <IconButton onClick={() => handleViewSchedule(cls.id)}>
                              <Schedule />
                            </IconButton>
                          </Tooltip>
                          {canManage && (
                            <>
                              <Tooltip title="Edit">
                                <IconButton onClick={() => handleOpenDialog(cls)}>
                                  <Edit />
                                </IconButton>
                              </Tooltip>
                              {((user?.role === 'school_admin') || (user?.role === 'principal')) && (
                                <Tooltip title="Delete">
                                  <IconButton onClick={() => handleDelete(cls.id)}><Delete color="error" /></IconButton>
                                </Tooltip>
                              )}
                            </>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
              {/* Pagination Controls */}
              {totalPages > 1 && (
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 2 }}>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    Page {page} of {totalPages} • Showing {classes.length} of {totalCount} classes
                  </Typography>
                  <Pagination
                    count={totalPages}
                    page={page}
                    onChange={handlePageChange}
                    color="primary"
                  />
                </Box>
              )}
            </>
          )}
        </CardContent>
      </Card>

      {/* Other Years Compact View */}
      {academicYears.length > 1 && (
        <Card sx={{ mt: 2 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              {selectedYear ? 'Other Academic Years' : 'Academic Years'}
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {yearCountsLoading ? (
                <CircularProgress size={20} />
              ) : (
                academicYears
                  .filter(year => !selectedYear || year !== selectedYear)
                  .map((year) => (
                    <Chip
                      key={year}
                      label={`${year} (${yearClassCounts[year] || 0} classes)`}
                      onClick={() => handleYearChange(year)}
                      variant="outlined"
                      clickable
                      color="primary"
                    />
                  ))
              )}
            </Box>
          </CardContent>
        </Card>
      )}
      {/* Add/Edit Dialog */}
      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
        <DialogTitle>{editingId ? 'Edit Class' : 'Add Class'}</DialogTitle>
        <form onSubmit={handleFormSubmit}>
          <DialogContent>
            <Grid container spacing={2}>
              <Grid item xs={12} md={6} {...({ item: true } as any)}>
                <TextField
                  label="Name"
                  value={form.name}
                  onChange={e => handleFormChange('name', e.target.value)}
                  fullWidth
                  required
                  margin="dense"
                />
              </Grid>
              <Grid item xs={12} md={6} {...({ item: true } as any)}>
                <TextField
                  label="Section"
                  value={form.section}
                  onChange={e => handleFormChange('section', e.target.value)}
                  fullWidth
                  required
                  margin="dense"
                />
              </Grid>
              <Grid item xs={12} md={6} {...({ item: true } as any)}>
                <TextField
                  label="Academic Year"
                  value={form.academic_year}
                  onChange={e => handleFormChange('academic_year', e.target.value)}
                  fullWidth
                  required
                  margin="dense"
                />
              </Grid>
              <Grid item xs={12} md={6} {...({ item: true } as any)}>
                <TextField
                  label="Capacity"
                  type="number"
                  value={form.capacity}
                  onChange={e => handleFormChange('capacity', Number(e.target.value))}
                  fullWidth
                  required
                  margin="dense"
                  inputProps={{ min: 1 }}
                />
              </Grid>
              <Grid item xs={12} md={6} {...({ item: true } as any)}>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={form.is_active}
                      onChange={e => handleFormChange('is_active', e.target.checked)}
                    />
                  }
                  label="Active"
                />
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseDialog}>Cancel</Button>
            <Button type="submit" variant="contained">{editingId ? 'Update' : 'Add'}</Button>
          </DialogActions>
        </form>
      </Dialog>
      {/* Students Modal */}
      <Dialog open={studentsModal.open} onClose={() => setStudentsModal({ open: false, classId: null, students: [] })} maxWidth="sm" fullWidth>
        <DialogTitle>Class Students</DialogTitle>
        <DialogContent>
          {modalLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 100 }}>
              <CircularProgress />
            </Box>
          ) : modalError ? (
            <Alert severity="error">{modalError}</Alert>
          ) : (
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Name</TableCell>
                    <TableCell>Student ID</TableCell>
                    <TableCell>Status</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {studentsModal.students.map(stu => (
                    <TableRow key={stu.id}>
                      <TableCell>{stu.user.first_name} {stu.user.last_name}</TableCell>
                      <TableCell>{stu.student_id}</TableCell>
                      <TableCell>
                        <Chip label={stu.academic_status} size="small" color={stu.academic_status === 'enrolled' ? 'success' : 'default'} />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setStudentsModal({ open: false, classId: null, students: [] })}>Close</Button>
        </DialogActions>
      </Dialog>
      {/* Schedule Modal */}
      <Dialog open={scheduleModal.open} onClose={() => setScheduleModal({ open: false, classId: null, schedule: [] })} maxWidth="md" fullWidth>
        <DialogTitle>Class Schedule</DialogTitle>
        <DialogContent>
          {modalLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 100 }}>
              <CircularProgress />
            </Box>
          ) : modalError ? (
            <Alert severity="error">{modalError}</Alert>
          ) : (
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Subject</TableCell>
                    <TableCell>Teacher</TableCell>
                    <TableCell>Day</TableCell>
                    <TableCell>Start Time</TableCell>
                    <TableCell>End Time</TableCell>
                    <TableCell>Room</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {scheduleModal.schedule.map(sch => (
                    <TableRow key={sch.id}>
                      <TableCell>{sch.subject?.name}</TableCell>
                      <TableCell>{sch.teacher_info?.name || '-'}</TableCell>
                      <TableCell>{sch.day}</TableCell>
                      <TableCell>{sch.start_time}</TableCell>
                      <TableCell>{sch.end_time}</TableCell>
                      <TableCell>{sch.room}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setScheduleModal({ open: false, classId: null, schedule: [] })}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Auto Generate Classes Dialog */}
      <Dialog open={autoGenerateDialog} onClose={() => setAutoGenerateDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Auto Generate Classes</DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              This will duplicate all classes from the most recent academic year ({latestYear}) to a new year.
            </Typography>
            
            {autoGenerateError && (
              <Alert severity="error" sx={{ mb: 2 }}>{autoGenerateError}</Alert>
            )}
            
            {autoGenerateSuccess && (
              <Alert severity="success" sx={{ mb: 2 }}>{autoGenerateSuccess}</Alert>
            )}
            
            <TextField
              label="Target Academic Year"
              value={targetYear}
              onChange={(e) => setTargetYear(e.target.value)}
              fullWidth
              required
              margin="dense"
              placeholder="e.g., 2026"
              helperText="Enter the academic year for the new classes"
            />
            
            <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
              <strong>Note:</strong> This will create new classes with the same grade names and sections but assigned to the new academic year.
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAutoGenerateDialog(false)}>Cancel</Button>
          <Button 
            onClick={handleAutoGenerate} 
            variant="contained" 
            disabled={autoGenerateLoading || !targetYear}
            startIcon={autoGenerateLoading ? <CircularProgress size={20} /> : <AutoAwesome />}
          >
            {autoGenerateLoading ? 'Generating...' : 'Generate Classes'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Classes; 